Einstein AI 

 

VISION 

 

Pre-Requisite 

1.Register to metamind with salesforce account and download einstein_platform.pem file and upload to files 

2.add Remote site access named EinsteinAI 

With address https://api.einstein.ai 

3.add Label named EinsteinAI_Email 

With value your email address that is used in registering  metamind 

4.add Label named EinsteinAI_BaseUrl 

With value https://api.einstein.ai/v2 

Note: 

Zip file uploaded from local drive max size 50mb 

Zip file uploaded from url max size 1gb 

Each zip must have minimum 40 images equally distributed in each subfoledr(label) 

Image file cannot   be more then 4mb in size uploading and prediction both 

Glossary 

Dataset: main folder name that contains all sub folders 

Labels; sub folders name that contains images  

Model: labels that are trained  

Train: make system to recognize type of image in each label 

Feedback: train system by sending wrong predicted image back to system with expected label to make system more efficient(this can be achieved using only curl operation) 

Json web token(jwt): we sign our rsa key with jwt and get access token 

Basic: 

1.Upload dataset to system 

2.train dataset 

3.get modelId 

4.predict image using model id 

Using curl 

1.Uploadind dataset by async method using url  

curl -X POST -H "Authorization: Bearer <TOKEN>" -H "Cache-Control: no-cache" -H "Content-Type: multipart/form-data" -F "path=http://einstein.ai/images/mountainvsbeach.zip" -F "type=image"  https://api.einstein.ai/v2/vision/datasets/upload 

Parameters 

Path: specify your zip url max size 1gb 

Type: is image 

Name: name of dataset if ignored it takes zip name 

2.Train dataset 

curl -X POST -H "Authorization: Bearer <TOKEN>" -H "Cache-Control: no-cache" -H "Content-Type: multipart/form-data" -F "name=Beach Mountain Model" -F "datasetId=57" https://api.einstein.ai/v2/vision/train 

Parameters 

datasetid:you get dataset id during uploading stage. 

Name: name of dataset 

3.Get models if dataset 

You get modelid of dataset that is used to tell system that you want to predict image for these labels 

curl -X GET -H "Authorization: Bearer <TOKEN>" -H "Cache-Control: no-cache" https://api.einstein.ai/v2/vision/datasets/<datasetID>/models 

Parameters 

datasetid:you get dataset id during uploading stage 

4.predict image  

curl -X POST -H "Authorization: Bearer <TOKEN>" -H "Cache-Control: no-cache" -H "Content-Type: multipart/form-data" -F "sampleLocation=http://www.mysite.com/our_beach_vacation.jpg" -F "modelId=YCQ4ZACEPJFGXZNRA6ERF3GL5E" https://api.einstein.ai/v2/vision/predict. 

Parameters 

modelid:model id that you obtaind in above step 

samplaelocation:it is url of image 

 

Using RestApi  

These are custom class that I have made 

Class name "EinsteinAI_Vision"  

Creating EinsteinAI_Vision instance generates a access token that is valid for 3600 secs 

Methods available 

1.getBearerToken(): return access token  

2.getApiUsage():return  (EinsteinAI_ApiUsage_Wraper) 

licenseId, 

predictionsRemaining, 

predictionsUsed, 

PredictionsMax 

3.createDataset(String url,String name):creates a dataset from url with specified name and returns  id, 

Return EinsteinAI_Dataset_Wraper 

     name, 

     totalExamples, 

     available, 

     statusMsg, 

     list of labels 

4.getAllDatasets():return list of all datasets parameters 

Return (List<EinsteinAI_Dataset_Wraper>) 

Id, 

name, 

list of label, 

available, 

statusMsg, 

TotalLabels 

5.getDataset(String datasetId):returns details of singel dataset parameters 

Return (EinsteinAI_Dataset_Wraper) 

Id, 

name, 

list of label, 

available, 

statusMsg, 

TotalLabels 

6.deleteDataset(String id):deletes dataset returns status code 204 for success 404 for not found and 400 for error 

7.trainDataset(String name,String datasetid):name is userdefined you can name anything and datasetid is for which dataset you want to train after uploading successfully function return (EinsteinAI_Traning_Wraper) 

DatasetId, 

name, 

status, 

progress, 

queuePosition, 

ModelId 

8.reTrainDataset(String modelId):if you want to retrain model without changing model id use this.It is help full when you add feed back our new images to label 

Returns (EinsteinAI_Traning_Wraper) 

DatasetId, 

name, 

status, 

progress, 

queuePosition, 

ModelId 

9.getTrainingStatus(String modelId):it accepts modelid and returns status of training parameters  

Return (EinsteinAI_Traning_Wraper) 

DatasetId, 

name, 

status, 

progress, 

modelId, 

list of trainStats 

10.getDatasetModels(String DatasetId):it returns list of models of dataset parameters 

Return (List<EinsteinAI_Traning_Wraper>) 

DatasetId, 

name, 

status, 

failureMsg,(if status is failed you get this ) 

ModelId 

11.predictBase64(String base64,String modelId):it accepts image file converted to base 64formate and model id of which dataset label it need to predict parameters return is list of probability and label name in ascending order 

Return (List<EinsteinAI_Predict_Wraper>) 

Label, 

probability 

 

12.predicturl(String url,String modelId):it accepts image file url and model id of which dataset label it need to predict parameters return is list of probability and label name in ascending order 

Return (List<EinsteinAI_Predict_Wraper>) 

Label, 

probability 

 

 

 

LANGUAGE(Beta) 

AIM-intent 

IT is used to analyze sentence and predicts a key word for it  

Sentence and its associated keywords provided by user 

AIM-Sentiment 

IT is used to analyze a sentience and predicts a sentiment of  it  

Sentence and its associated keywords provided by user. Sentiments are positive, negative, and neutral class 

Pre-Requisite 

1.Register to metamind with salesforce account and download einstein_platform.pem file and upload to files 

2.add Remote site access named EinsteinAI 

With address https://api.einstein.ai 

3.add Label named EinsteinAI_Email 

With value your email address that is used in registering  metamind 

4.add Label named EinsteinAI_BaseUrl 

With value https://api.einstein.ai/v2 

Glossery  

1.dataset: a csv file congaing text sentence and their associated keywords 

2.label: number of keywords in a dataset 

3.feedback: if model returns wrong keyword then send back same text with expected keyword to model for making it more accurate 

4.Example: add more sentence and keyword to existing dataset 

5.Train: training a system to analyze sentence from dataset 

6.predict: get probability for each keyword in dataset 

Basic: 

1.Upload dataset to system 

2.train dataset 

3.get modelId 

4.analyze text using model id 

Using curl 

1.Uploadind dataset by async method using url  

curl -X POST -H "Authorization: Bearer <TOKEN>" -H "Cache-Control: no-cache" -H "Content-Type: multipart/form-data" -F "path=http://einstein.ai/text/weather.csv" -F "type=text-intent"  https://api.einstein.ai/v2/language/datasets/upload 

Parameters 

Path: specify your zip url max size 1gb 

Type:can be text-intent for keyword traning or text-sentiment for training sentiments  

Name: name of dataset if ignored it takes zip name 

2.Train dataset 

curl -X POST -H "Authorization: Bearer <TOKEN>" -H "Cache-Control: no-cache" -H "Content-Type: multipart/form-data" -F "name=Weather Intent Model" -F "datasetId=1001411" https://api.einstein.ai/v2/language/train 

Parameters 

datasetid:you get dataset id during uploading stage. 

Name: name of dataset 

3.Get models if dataset 

You get modelid of dataset that is used to tell system that you want to predict image for these labels 

curl -X GET -H "Authorization: Bearer <TOKEN>" -H "Cache-Control: no-cache" https://api.einstein.ai/v2/language/datasets/<modelid>/models 

Parameters 

datasetid:you get dataset id during uploading stage or get all datasets curl 

4.analyzetext-intent 

curl -X POST -H "Authorization: Bearer <TOKEN>" -H "Cache-Control: no-cache" -H "Content-Type: multipart/form-data" -F "modelId=WEQ6PHPBGFYVX5C7QDP6XU3NXY" -F "document=what is the weather in los angeles" https://api.einstein.ai/v2/language/intent 

Parameters 

modelid:model id that you obtained in above step 

document: it is text that you want to analyze 

5.analyzetext-intent 

curl -X POST -H "Authorization: Bearer <TOKEN>" -H "Cache-Control: no-cache" -H "Content-Type: multipart/form-data" -F "modelId=WJH4YCA7YX4PCWVNCYNWYHBMY4" -F "document=I can't tell you how much fun it was" https://api.einstein.ai/v2/language/sentiment 

Parameters 

modelid:model id that you obtained in above step 

document: it is text that you want to analyze 

Using RestApi  

These are custom class that I have made 

Class name "EinsteinAI_Language"  

Creating EinsteinAI_Language instance generates a access token that is valid for 3600 secs 

Methods available 

1.getBearerToken(): return access token  

2.getApiUsage():return  (EinsteinAI_ApiUsage_Wraper) 

licenseId, 

predictionsRemaining, 

predictionsUsed, 

PredictionsMax 

3.createDataset(String url,String name):creates a dataset from url with specified name and returns  (EinsteinAI_Dataset_Wraper), 

     id 

     name, 

     totalExamples, 

     available, 

     statusMsg, 

     list of labels 

4.getAllDatasets():return list of all datasets parameters 

Return (List<EinsteinAI_Dataset_Wraper>) 

Id, 

name, 

list of label, 

available, 

statusMsg, 

TotalLabels 

5.getDataset(String datasetId):returns details of singel dataset parameters 

Return (EinsteinAI_Dataset_Wraper) 

Id, 

name, 

list of label, 

available, 

statusMsg, 

TotalLabels 

6.deleteDataset(String id):deletes dataset returns status code 204 for success 404 for not found and 400 for error 

7.trainDataset(String name,String datasetid):name is user defined you can name anything and datasetid is for which dataset you want to train after uploading successfully function return (EinsteinAI_Traning_Wraper) 

DatasetId, 

name, 

status, 

progress, 

queuePosition, 

ModelId 

8.reTrainDataset(String modelId):if you want to retrain model without changing model id use this.It is help full when you add feedback our new images to label 

Returns (EinsteinAI_Traning_Wraper) 

DatasetId, 

name, 

status, 

progress, 

queuePosition, 

ModelId 

9.getTrainingStatus(String modelId):it accepts modelid and returns status of training Return (EinsteinAI_Traning_Wraper) 

DatasetId, 

name, 

status, 

progress, 

modelId, 

list of trainStats 

10.getDatasetModels(String DatasetId):it returns list of models of dataset parameters 

Return (List<EinsteinAI_Traning_Wraper>)  

DatasetId, 

name, 

status, 

failureMsg,(if status is failed you get this ) 

ModelId 

11.predictionIntent(String modelId,String text):it accepts text string  and model id of which dataset label it need to predict parameters return is list of probability and label name in ascending order 

Return (List<EinsteinAI_Predict_Wraper>) 

Label, 

probability 

12.predictionSentiment(String modelId,String text):t accepts text string  and model id of which dataset label it need to predict parameters return is list of probability and label name in ascending order 

Return (List<EinsteinAI_Predict_Wraper>) 

Label, 

probability 

 

Wrapper REF:https://github.com/sonicfurqan/simple-salesforce-einstein-wrapper