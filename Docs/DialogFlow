DialogFlow

It is natural language processing service offered by a subsidiary branch of google  

Glossary 

Agent: this is your app that holds all information  

Entities: Entities are variables that your app takes action on 

Training: it is process of training your agent to match user text with intents 

Integrations: It is process of add your agent to services like skype, facebook, etc. 

Fulfillment: in fulfillment you provide a link that have no authentication or have a basic authentication that accepts a post method body. From post method you send response to api.ai  

Response can be 

Simple text response 

Simple text response with context 

Telling agent to jump to another action(intent)  

Intents: intents match user text  to actions in your app(agent) 

Fallback Intent: this is triggered when user text doesn’t match any intent that our agent is trained with 

Follow-Up Intent: this Is sub intent of main intent. It is used when you want to have conversation with user with storing some information. 

Example 

User: hi I am furqan how are you 

Bot: hi furqan I am fine 

User: can you show me what is for menu 

Bot: Furqan, today we have Lobster in menu 

As you can see bot remembers user name this can be achieved by using follow-up intent 

Contexts: This are used to pass parameters between intents 

Context-out: if you write custom name here. That custom name will become object and contain all the parameters that are in this intent and passed to next intent that is triggered 

Context-out-follow-up: this context object is made by system when you create a follow up intent on a intent this context=out-follow-up object is passed to follow-up intent indicating system that it has to trigger that intent after current intent 

Context-in-follow-up: this context object is auto generated by system for follow-up intent that is created on intent so that this intent can have the information that is needed and also it indicates to the system that this intent is to be triggered after the previous intent is finished 

Context-in: this object contains all the parameters that are passed from another intent  

Lifespan: This number indicates how far context object is alive I.e each text query by user accounts for one life then if life span is 5 then after context object is created then it lives for 5 user query's and gets auto deleted 

Action: this are the keywords that represent a intent it is unique to each intent (if you want you can name them same )it is useful in web hook to perform operation based in action 

Events: normally event name is same as action name to avoid confusion to system and user this is used when using web hook, you want to trigger another intent that is not follow-up or no way related to what sequence its running. Context variable with same name as event name is also created Note: if you are using events to trigger another intent that that intent should have a context-in variable as event name or else that event will not be triggered  

Require: if you make any parameter require then you must provide response text to it. Not entity is not finished until you enter that parameter aka slot filling 

API.AI function to Know 

To access parameters 

$: use dollar to access parameter by its key name in an intent  

#: use ash to access parameter by contextname.keyname in a context object 

@: use it to map entity name to user created entity. Normally api.ai will map entity's if recognized if not you can use this 

System provided entity that are used frequently 

@sys.any:select sentence or word of any length and map it with @sys.any after mapping give it a parameter name then that text will become a parameter system will recognize this as a parameter in a text. Recognizing boundary suffix if @sys.any and prefix of @sys.any acts as a boundary for matching it 

Note: here hi and goodmorning are entity we defined Example 1.  

TRAIN: HI user (=maps as @sys.any) goodmorning 

USER:Hi qw dd ksad udf goodmorning 

BOT:parameter name = qw dd ksad udf 

Example 2.  

TRAIN: Hi user (=maps as @sys.any) goodmorning 

USER: HI syed furqan goodmorning 

BOT: parameter name =syed furqan 

 

 

@sys.date:maps date 

@sys.number:string of number 

@sys.number-sequence:Matches number sequence 

@sys.geo-capital:World capitals 

@sys.geo-country:Short and full names of country 

@sys.email:email 

@sys.phone-number:Phone number 

@sys.url:Matches a url 

Web Hook Response Json Format 

1.normal text display response  

Speech: it holds text that is to be displayed 

displayText: it holds text that is to be displayed 

data: holds response in format that other services accept.<facebook_message> is Facebook json response format 

ContextOut:it is used to send data that next intent that is going to be triggered needs or just transfer what context we received sent it back. (NOTE: normally we don’t add any context out of our own just copy what we received and send it back. But its ur wish you can experiment) 

Source: is string mentioning from where the response has received to api.ai system   

 

{ 
"speech": "Barack Hussein Obama II was the 44th and current President of the United States.", 
"displayText": "Barack Hussein Obama II was the 44th and current President of the United States, and the first African American to hold the office. Born in Honolulu, Hawaii, Obama is a graduate of Columbia University   and Harvard Law School, where ", 
"data":  {"facebook": {<facebook_message>}}, 
"contextOut": [{"name":"weather", "lifespan":2, "parameters":{"city":"Rome"}}], 
"source": "DuckDuckGo" 
} 

2.Triggering event from webhook 

Name:name of event that is defined in intent NOTE:to my experience that that event should also have a context in variable name same as event name for this to work 

Data:using this send any parameters that you want to send and you can acess it by #eventname.parametername  

"event":{   
  "name":"<event_name>", 
  "data":{ 
      "<parameter_name>":"<parameter_value>" 
  } 
} 

 

This is as much as I can document one has to try it to understand 

 

API.AI REST using curl 

From creating intent, entity and training can be done using rest api  

I will cover only basics here 

BASE ENDPOINT URL=https://api.api.ai/v1/ 

Header: Access token can be found in setting of your agent 

Authorization: Bearer YOUR_ACCESS_TOKEN 

Sending text to service[POST] 

CURL 

Suffex url with /query?v=20150910 
the v parameter is formatted as YYYYMMDD. 

 

POST https://api.api.ai/v1/query?v=20150910 
 
Headers: 
Authorization: Bearer YOUR_ACCESS_TOKEN 
Content-Type: application/json; charset=utf-8 
POST body: 
{ 
    "query": "and for tomorrow", 
    "contexts": [{ 
        "name": "weather", 
        "lifespan": 4 
    }], 
    "location": { 
        "latitude": 37.459157, 
        "longitude": -122.17926 
    }, 
    "timezone": "America/New_York", 
    "lang": "en", 
    "sessionId": "1234567890" 
} 

IF SUCCESSFUL YOU WILL GET JSON RESPONSE 

entities endpoint is used to create, retrieve, update, and delete developer-defined entity objects. 

Ref:https://api.ai/docs/reference/agent/entities 

Create an entity[POST] 

Curl 

POST https://api.api.ai/v1/entities?v=20150910 
 
Headers: 
Authorization: Bearer YOUR_DEVELOPER_ACCESS_TOKEN 
Content-Type: application/json; charset=utf-8 
 
POST body: 
{ 
    "name": "Appliances", 
    "entries": [{ 
        "value": "Coffee Maker", 
        "synonyms": ["coffee maker", "coffee machine",  "coffee"] 
    }, { 
        "value": "Thermostat", 
        "synonyms": ["Thermostat", "heat", "air conditioning"] 
    }, { 
        "value": "Lights", 
        "synonyms": ["lights", "light", "lamps"] 
    }, { 
        "value": "Garage door", 
        "synonyms": ["garage door", "garage"] 
    }] 
} 

IF SUCCESSFUL YOU WILL GET JSON RESPONSE 

Intents endpoint is used to create, retrieve, update, and delete intent objects 

Ref:https://api.ai/docs/reference/agent/intents 

Get all Intent[GET] 

 curl  

-k -H "Authorization: Bearer YOUR_DEVELOPER_ACCESS_TOKEN" https://api.api.ai/v1/intents?v=20150910 

The contexts endpoint allows you to get active contexts, add new contexts, or delete active contexts for the specified session Id. 

Ref:https://api.ai/docs/reference/agent/contexts 

Get all context[GET] 

curl -i -X GET \ 
   -H "Accept: application/json" \ 
   -H "Content-Type: application/json" \ 
   -H "Authorization: Bearer YOUR_ACCESS_TOKEN" \ 
'https://api.api.ai/v1/contexts?sessionId=1234567890' 

IF SUCCESSFUL YOU WILL GET JSON RESPONSE 

 

 

 

 
 

 
 

 

 
 

 

 

 

 

 

 

 

 